---
- name: Update and Gather Information
  hosts: hostlist
  become: yes
  vars:
    log_timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}"

  tasks:
    - name: Create log directory on Ansible control machine (localhost)
      local_action:
        module: file
        path: "/root/cfgmain/patching/prepatch/logs/{{ ansible_date_time.date }}/{{ ansible_hostname }}/{{ log_timestamp }}"
        state: directory
        recurse: yes

    - name: Remove old kernel/s
      shell: "package-cleanup -y --oldkernels --count=1"
      register: kernel_removal_result

    - name: Save kernel removal output as a log file
      copy:
        content: "{{ kernel_removal_result.stdout }}"
        dest: "/root/cfgmain/patching/prepatch/logs/{{ ansible_date_time.date }}/{{ ansible_hostname }}/{{ log_timestamp }}/kernel_removal.log"
      delegate_to: localhost

    - name: Yum clean-up
      shell: yum clean all
      register: yumcleanup
      ignore_errors: yes

    - name: Log the YUM cleanup
      copy:
        content: "{{ yumcleanup.stdout }}"
        dest: "/root/cfgmain/patching/prepatch/logs/{{ ansible_date_time.date }}/{{ ansible_hostname }}/{{ log_timestamp }}/yumcleanup.log"
      delegate_to: localhost

    - name: Check the new Kernel
      shell: "{{ item }}"
      loop:
        - "uname -r"
      register: command2_result
      ignore_errors: yes

    - name: Save command outputs as log files
      copy:
        content: "{{ item.stdout }}"
        dest: "/root/cfgmain/patching/prepatch/logs/{{ ansible_date_time.date }}/{{ ansible_hostname }}/{{ log_timestamp }}/{{ item.item.split(' ')[0] }}-new.log"
      loop: "{{ command2_result.results }}"
      delegate_to: localhost
